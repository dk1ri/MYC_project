<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!--This file was converted to xhtml by OpenOffice.org - see http://xml.openoffice.org/odf2xhtml for more info.--><head profile="http://dublincore.org/documents/dcmi-terms/"><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/><title xml:lang="en-US">MYC Commands</title><meta name="DCTERMS.title" content="MYC Commands" xml:lang="en-US"/><meta name="DCTERMS.language" content="en-US" scheme="DCTERMS.RFC4646"/><meta name="DCTERMS.source" content="http://xml.openoffice.org/odf2xhtml"/><meta name="DCTERMS.issued" content="2012-03-14T11:26:09.29" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.contributor" content="DK1RI"/><meta name="DCTERMS.modified" content="2015-10-27T12:29:19.62" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.provenance" content="" xml:lang="en-US"/><meta name="DCTERMS.subject" content="," xml:lang="en-US"/><link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" hreflang="en"/><link rel="schema.DCTERMS" href="http://purl.org/dc/terms/" hreflang="en"/><link rel="schema.DCTYPE" href="http://purl.org/dc/dcmitype/" hreflang="en"/><link rel="schema.DCAM" href="http://purl.org/dc/dcam/" hreflang="en"/><style type="text/css">
	@page {  }
	table { border-collapse:collapse; border-spacing:0; empty-cells:show }
	td, th { vertical-align:top; font-size:12pt;}
	h1, h2, h3, h4, h5, h6 { clear:both }
	ol, ul { margin:0; padding:0;}
	li { list-style: none; margin:0; padding:0;}
	<!-- "li span.odfLiEnd" - IE 7 issue-->
	li span. { clear: both; line-height:0; width:0; height:0; margin:0; padding:0; }
	span.footnodeNumber { padding-right:1em; }
	span.annotation_style_by_filter { font-size:95%; font-family:Arial; background-color:#fff000;  margin:0; border:0; padding:0;  }
	* { margin:0;}
	.P1 { font-size:12pt; font-family:Times New Roman; writing-mode:page; text-align:right ! important; }
	.P10 { font-size:12pt; font-family:Times New Roman; writing-mode:page; text-decoration:none ! important; }
	.P11 { font-size:12pt; font-family:Times New Roman; writing-mode:page; font-style:normal; font-weight:normal; }
	.P12 { font-size:12pt; font-family:Times New Roman; writing-mode:page; font-style:normal; text-decoration:underline; }
	.P13 { font-size:12pt; font-family:Times New Roman; writing-mode:page; font-style:normal; }
	.P14 { font-size:12pt; font-family:Times New Roman; writing-mode:page; }
	.P15 { font-size:11pt; font-family:Calibri; writing-mode:page; font-weight:normal; }
	.P16 { font-size:12pt; font-family:Times New Roman; writing-mode:page; font-weight:bold; }
	.P17 { font-size:12pt; font-family:Times New Roman; writing-mode:page; font-weight:normal; }
	.P18 { font-size:14pt; font-family:Times New Roman; writing-mode:page; text-align:center ! important; font-weight:bold; }
	.P3 { font-size:12pt; font-family:Times New Roman; writing-mode:page; font-weight:normal; }
	.P4 { font-size:12pt; font-family:Times New Roman; writing-mode:page; font-weight:normal; background-color:#ffffff; }
	.P5 { font-size:12pt; font-family:Times New Roman; writing-mode:page; font-weight:bold; }
	.P6 { font-size:12pt; font-family:Times New Roman; writing-mode:page; font-style:italic; }
	.P7 { font-size:12pt; font-family:Times New Roman; writing-mode:page; font-style:italic; font-weight:normal; }
	.P8 { font-size:12pt; font-family:Times New Roman; writing-mode:page; font-style:italic; text-decoration:none ! important; }
	.P9 { font-size:12pt; font-family:Times New Roman; writing-mode:page; text-decoration:underline; }
	.Standard { font-size:12pt; font-family:Times New Roman; writing-mode:page; }
	.Internet_20_link { color:#000080; text-decoration:underline; }
	.T1 { color:#0000ff; font-family:Times New Roman; font-size:12pt; text-decoration:underline; }
	.T2 { background-color:#ffffff; }
	.T3 { font-style:italic; text-decoration:none ! important; }
	.T4 { font-weight:normal; }
	.T5 { font-style:normal; }
	<!-- ODF styles with no properties representable as CSS -->
	{ }
	</style></head><body dir="ltr" style="max-width:29.7cm;margin-top:2cm; margin-bottom:2cm; margin-left:2cm; margin-right:2cm; "><p class="P18">MYC Announcements and  Commands</p><p class="P3">Author: DK1RI</p><p class="P3"> </p><p class="P3">This paper describes announcements and the command syntax and the format.</p><p class="P3">For usage, handling and environment for these commands see [1] and [2]</p><p class="Standard"> </p><p class="P5">Definitions and formats</p><p class="Standard"> </p><p class="Standard">HI<span> </span><span> </span><span> human Interface  device, device-type h</span></p><p class="Standard">CR<span> </span><span> </span><span> command-router, device-type c</span></p><p class="Standard">LD<span> </span><span> </span><span> logic-device, device-type l</span></p><p class="Standard">RU<span> </span><span> </span><span> rules device, device-type r</span></p><p class="Standard">PR<span> </span><span> </span><span> program with MYC Interface or interface to program, device-type p</span></p><p class="Standard">VA<span> </span><span> </span><span> device variable announcelist as lower level MYC system, device-type v</span></p><p class="Standard">&lt;c&gt;<span> </span><span> </span><span> unique (per device) command token; one number (Byte, word, long or x (8 Byte)). 0 (one byte always) is reserved for the basic</span></p><p class="Standard"><span> </span><span> </span><span> announcement. &amp;HxxF0 - &amp;HxxFF are also reserved</span></p><p class="Standard">&lt;dt&gt;<span> </span><span> </span><span> device-type: m, p, c, l, h, v, r</span></p><p class="Standard">&lt;ct&gt;<span> </span><span> </span><span> command-type</span></p><p class="Standard">&lt;p&gt;<span> </span><span> </span><span> property (parameter) of the type &lt;n&gt; or &lt;s&gt; in command and info </span></p><p class="Standard">&lt;pa&gt;<span> </span><span> </span><span> property of the type &lt;n&gt;, &lt;ty&gt;, &lt;sm&gt; or &lt;OPTION&gt; in an announcement </span></p><p class="Standard">&lt;OPTION&gt;<span> </span><span> optional property</span></p><p class="Standard">&lt;des&gt;<span>  </span><span> </span><span> a string &lt;sm&gt;  used in announcements for identification or description of  commands and properties.</span></p><p class="Standard"><span> </span><span> </span><span> &lt;des&gt; are optional sometimes. They can be used better human reading and for informative display of the HI and the LD. </span></p><p class="Standard"><span> </span><span> </span><span> They are also used for the translation to real values.</span></p><p class="Standard">&lt;n&gt;<span> </span><span> </span><span> numeric value, binary in commands, decimal readable in announcements, &amp;Hxx, &amp;Bxx notatiom allowed</span></p><p class="Standard"><span> </span><span> </span><span> For the selection of the command-format it is important, how many different values are needed. So a range of -3 to +200 has 204 </span><span> </span><span> </span><span> values and a byte with the range of 0 to 203 is used. </span></p><p class="Standard"><span> </span><span> </span><span> A range from 1,0 to 2.0 needs 11 values from 0 to 10 – a byte is also sufficient.</span></p><p class="Standard"><span> </span><span> </span><span> The human interface knows the real values by the readable and real values of &lt;des&gt; of the announcement  and will translate and </span></p><p class="Standard"><span> </span><span> </span><span> display the real values.</span></p><p class="Standard"><span> </span><span> </span><span> To minimize transmission time, numeric values are transmitted</span></p><p class="Standard"><span> </span><span> </span><span> as byte</span><span> </span><span> </span><span> </span><span> if equal or less than 255 different values are needed (240 for command-token)</span></p><p class="Standard"><span> </span><span> </span><span> as unsigned word (2 byte)</span><span> </span><span> if equal or less than 655356 different values are needed</span></p><p class="Standard"><span> </span><span> </span><span> as unsigned long word (4 byte)</span><span> if up to 4294967296 different values are needed</span></p><p class="Standard"><span> </span><span> </span><span> All sequence numbers are “0” based. For values of &lt;n&gt; see &lt;ty&gt;</span></p><p class="Standard">&lt;s&gt;<span> </span><span> </span><span> string, all characters. The string is preceded by the length; as byte, word or long, depending on maximum length.</span></p><p class="Standard"><span> </span><span> </span><span> This type exists in commands and infos</span></p><p class="Standard">&lt;sm&gt;<span> </span><span> </span><span> string (all characters except  , ;) Used in announcements. , and ; and \ must be escaped (preceded) by \</span></p><p class="Standard">&lt;l&gt;<span> </span><span> </span><span> maximum length of a string &lt;s&gt; in announcements</span></p><p class="Standard">&lt;ty&gt;<span> </span><span> </span><span> a : bit, b : byte, i : signed integer, w : unsigned word, L : unsigned long, s : single, d : double, t : time-date. c : command-token, </span></p><p class="Standard"> <span> </span><span> </span><span> &lt;l&gt; : string of type &lt;s&gt; with maximum length of l (actual transmitted string may be shorter)</span></p><p class="Standard"><span> </span><span> </span><span> t: the date format. The UNIX 64 bit format is used.</span></p><p class="Standard"><span> </span><span> </span><span> A bit is transferred as a byte with the value of &amp;H00 or &amp;H01</span></p><p class="Standard">&lt;default&gt;<span> </span><span> a default value in an announcement</span></p><p class="Standard">&lt;fixed&gt;<span> </span><span> a fixed informative value in an announcement</span></p><p class="Standard">&lt;announce&gt;<span> </span><span> complete announcement or announcement line, a string &lt;sm&gt;; the answer of 0 or 0FxxF0 command. is transmitted in &lt;s&gt; format</span></p><p class="Standard">&lt;data&gt;<span> </span><span> </span><span> &lt;s&gt; or &lt;n&gt; in commands or info </span></p><p class="Standard">separators<span> </span><span> For the announcement parser (CR, HI or LD eg):  , ; (comma, semicolon) </span></p><p class="Standard"><span> </span><span> </span><span> , is the separator between &lt;pa&gt; and &lt;des&gt;.</span></p><p class="Standard"><span> </span><span> </span><span> ; is the separator between &lt;pa&gt;</span></p><p class="Standard">&amp;HxxFF<span> </span><span> means highest number in 1, 2, or 4 Byte hex format</span></p><p class="Standard"> </p><p class="P5">Announcements</p><p class="Standard"> </p><p class="Standard">The announcement uses a readable string in &lt;sm&gt; format. So the number of the command token is a readable figure, 1 eg for a hex &amp;H01 command </p><p class="Standard">A complete announcement of a device consist of one line with the basic announcement, lines of command announcements, lines for the reserved tokens, and  lines of rules; in this sequence.</p><p class="Standard">The basic announcement contains the description of the device. For details see [6]</p><p class="Standard">The command announcements describe the commands the  device will understand.</p><p class="Standard">Three of the reserved tokens can be used by the CR to identify a device, also, if more than one of the same device-type exist. (&amp;H00, &amp;HxxFE, &amp;HxxFF)</p><p class="Standard">The rules describe the conditions, when and how the commands will work for a device. Rules lines start with "R".</p><p class="Standard">“Q” rules are send by the rulesdevices to the command-router and are not forwarded. The are used for usermanagement.</p><p class="Standard"> </p><p class="Standard">Command-types without answer of the device are denoted by o (operate), with answer by a (answer) as the first letter. If a function can operate and answer, the descriptions in the other announcement should be identical. For example a memory, which can be written and read, must have the same unique description, to allow other devices to identify, that it is the same memory. Alternatively the description can be "as5" eg, where 5 is the command-token of the other command (see also announcement / command optimizing below).</p><p class="Standard"> </p><p class="Standard">In general a device interface is a very simple construction with limited communcationbandwidth. So command communication should be simple and short, but announcements are communicated rarely or never, so they can be longer and descriptive in a readable format.</p><p class="Standard">Announcements are stored in the devices, but can be stored also in a database or in the command-router.</p><p class="Standard">The CR, LD and HI may find the details of the attached devices somewhere and probably will not ask the devices for detailed announcements or announcements at all.</p><p class="Standard">The CR, LD and HI should be more "intelligent". They should be able to build up a complete MYC System by reading the announcements without operator interaction also in a varying environment. To ensure this, the description in the announcement should be sufficient and not too short. </p><p class="Standard">Obviously a command-router cannot poll for devices worldwide, so at initialization it must know a place, where all "its" possible devices are listed.</p><p class="Standard">May be, that not all devices are active every time, but the CR,LD and HI must be able to handle this situation. So, the answer of a (announcement) &amp;HxxF0 command to a command-router is not static.  It varies, when commands or devices disappear. Commands can also be active or disabled.</p><p class="Standard"> </p><p class="Standard">How announcements can be called by the commands &amp;H00 and  &amp;HxxF0 is described in [6]</p><p class="Standard"> </p><p class="P5">General syntax for a command-announcement</p><p class="Standard"> </p><p class="Standard">&lt;c&gt;;&lt;ct&gt;[,&lt;des&gt;]...[,&lt;des&gt;][;&lt;pa&gt;[,&lt;des&gt;]..[,&lt;des&gt;]]...[;&lt;pa&gt;[,&lt;des&gt;]... [,&lt;des&gt;]]</p><p class="Standard"> </p><p class="P5">Commands and properties</p><p class="P5"> </p><p class="Standard">The command tokens use numeric byte, word, long format.  The shortest format is always used.</p><p class="Standard">For properties the same  rules apply.</p><p class="Standard">For memory like commands other formats are possible as well and defined by &lt;ty&gt;.</p><p class="Standard">So if a device has less than 239 (0, 240- 255 is reserved) commands, the communication with the CR use byte format for the command token. If the CR knows more for the different devices, it may communicate with the HI with words (2 bytes). or long (4 bytes). In<span class="T2"> this case, the first byte of translated command-tokens must not be 0, because 0 is reserved for the basic announcement of the CR.</span></p><p class="P4">Shortest possible format is used for properties as well. The command-router and the devices know the format by the announcement.</p><p class="P3">A command consist of a command-token and properties (parameters) depending on the command-type.</p><p class="P3">The number and type of the properties of a command must match the announcement. If the announcement describe a min and max property and unit, the command will obviously have one property only for the value. For details see List of Standardized Command-types below.</p><p class="Standard"><span class="T4">Each command belongs to a standardized command-type. There are w ind i command-types for metacommands, operate (o) command-types, answer (a) command-types and "require to operate" (r)  command-types. The announcement for r command-types is identical to the o command-type and therefore </span>not<span class="T4"> mentioned in the list below. These are used by PR and HI to denote what they want and can send commands in addition to the commands they get from the CR. The LD must find a translation of these other commands. or block them. Therefore "r" commands are forwarded to the LD only.</span></p><p class="P3">Each standardized command-type denotes a general function like os for operate a switch and defines the number and type of the properties. From this other devices will know the details of the devices function and the length of a command. The list below show the announcement templates, corresponding command, answer and info for the command-types.</p><p class="P3">In some cases, different command-types can be chosen for a command. A frequency control will obviously get a range op type , because it covers a range of values, which can be easily defined with a min and max value. But what about a address ranging from 0 to 9? This can also be realized as a switch with 10 positions or a range type command. The command will act identical; the display on the HI may be different. If the real values are not a range  or each position has a individual label the switch must be used in any case.</p><p class="P3">A rule of thumb is, that the range, p command-type will be used, if there are "many" equal distance values in a range.</p><p class="P3">Optional properties are defined for command-types and are optional for an announcement. If they are defined in an announcement, they must be given in a command in some cases. </p><p class="P3">Usually the type &lt;ty&gt; of properties is predefined by the command-type.</p><p class="P3"> </p><p class="Standard">There is no rule for devices for the numbering of the command-token, but simple sequenced numbering is recommended. The CR will put  the command-tokens of the known individual devices together, so that all commands are sequenced with translated command-tokens in the same order as the original announcement lines. The new command-tokens start with &amp;H01 (&amp;H0100, &amp;H01000000, (no "0" as first byte) or higher in a simple sequence without gaps. There will be gaps in the list, if a known device disappears. </p><p class="Standard">The CR will not forward announcement commands (&amp;Hxx240) but answer them with its own command.</p><p class="Standard">A announcelist from a lower level CR will have the own announcements at the beginning (basic command) and the end. The CR will put these together, so that announcements belonging to the lower level CR are in a sequence.</p><p class="Standard">The reserved tokens of the individual devices are translated by the CR as well; the own (reserved) tokens of the CR are &amp;HxxF0 ...</p><p class="Standard">Devices as PR and HI, which can send commands must send their own infos with translated tokens. Otherwise the command-router cannot identify them.</p><p class="P3">The CR must translate the command-tokens of the content of list commands and announcements as well.</p><p class="P3"> </p><p class="P3"> </p><p class="P5">General syntax for a command</p><p class="Standard"/><p class="P3">&lt;c&gt;[&lt;p&gt;]...[&lt;p&gt;]</p><p class="Standard"> </p><p class="Standard"> </p><p class="P5">Info</p><p class="Standard"> </p><p class="Standard">Some  command-types can send answers without a command as info. It is not mandatory, that a device must send infos; a I2C slave will never do.</p><p class="Standard">The CR translates the infos tokens if necessary. It sends all translated infos of normal devices to the logic device. A normal device do not have the knowledge of the other connected device; so the format is &lt;command&gt;&lt;answer.&gt;. Other devices can send infos also to single devices, lists or all. So the format is &lt;command&gt;&lt;destination&gt;&lt;answer&gt;. Using this method a info of a normal device can be sent to single devices.</p><p class="Standard">infos are not sent to normal devices. Other devices get infos when they are not waiting for answers.</p><p class="Standard">PR and HI send translated infos.</p><p class="Standard"> </p><p class="P5">General syntax for info</p><p class="Standard"> </p><p class="Standard">&lt;c&gt;[&lt;p&gt;]...[&lt;p&gt;] for normal devices.</p><p class="Standard">&lt;c&gt;&lt;destination&gt;[&lt;p&gt;]...<span> </span><span> </span><span> </span><span> &lt;destination is the commandtoken of the basic announcement of the device  or a list</span></p><p class="Standard"> </p><p class="P5">Announcement / Command optimizing</p><p class="P3"> </p><p class="P3">The following optimizations may be used by all devices. The CR will only resolve the long announcement line to one and copy the "as" line. The CR will translate commandtoken for normal devices. others must use translated commandtoken.</p><p class="P3">The LD and the HI and PR should understand the optimizations.</p><p class="P3"> </p><p class="P7">Long announcement lines</p><p class="P3">If a announcement is to too long to fit in one line more lines can be used. The command-token must be the same.</p><p class="P3">So</p><p class="P3"><span> 11;aa,Control;a,Preset;a,Motor_cw;a,Motor_ccw</span></p><p class="P3"><span> 11;aa;a,Limit;a,Underlimit;a,Overlimit</span></p><p class="P3">is the same as</p><p class="P3"><span> 11;aa,Control;a,Preset;a,Motor_cw;a,Motor_ccw;a,Limit;a,Underlimit;a,Overlimit</span></p><p class="P3">The CR simply paste the lines together omitting commandtoken and commandtype of the second line. So take care for valid syntax.</p><p class="P3"/><p class="P7">Save space in announcements</p><p class="P3">If  a function can operate and answer, one announcement can be simplified:</p><p class="P3"><span> 5;op,Rotatoroffset;0;360</span></p><p class="P3"><span> 6;ap,as5</span></p><p class="P3">will be resolved by the CR to</p><p class="P3"><span> 6;ap,Rotatoroffset;0;360</span></p><p class="P3"> </p><p class="P7">Optimize command transmission </p><p class="P3">If a command should be very short and a parameter should be part of the command-token, the following can be used</p><p class="P3">Instead of  a the two byte command</p><p class="P3"><span> 2;os;0,manual;1,preset</span></p><p class="P3">you use 2 one byte command-token</p><p class="P3"><span> 2;os;0;manual</span></p><p class="P3"><span> 3;os,ext2;1,preset</span><span> </span><span> </span><span> ext as extend</span><span> </span><span> </span><span> The extend is an information for HI and PR, that it is one switch</span></p><p class="P3"> </p><p class="P7">different method</p><p class="P11">Some functions can be accessed with different methods. A oscillator can be controlled with a value (by memory or knob) or as scan function</p><p class="P11">2,op,VFOA;1,ranges;Hz;lin;3500000;3800000</p><p class="P11">3,oo,ext2;255;0;255;0;25000;10000</p><p class="P11">4,oo,ext2;255;0;255;10000;10000<span> fixed stepsize for scanning, stepsize omitted in the command </span></p><p class="Standard"> </p><p class="P5">More about Descriptions</p><p class="Standard"> </p><p class="Standard">There are two kinds of descriptions: </p><p class="Standard">- the first (also in sequence) describe the real values of properties for range and numeric memory command-types, if real values and transmitted values are different. The stored and transmitted values have the range 0 to x (as per description). Strings are stored and transmitted as original (coding would not save space).</p><p class="Standard">These descriptions must be of the same propertytype as the property. The following is allowed for memories:</p><p class="Standard">1,2,3<span> </span><span> </span><span> value 1,2,3 are the real values for 0, 1, 2. Other values are ignored.</span></p><p class="Standard">1.0 to 3.0<span> </span><span> real values are 1.0, 1,1... 3.0</span></p><p class="Standard">1 to 999<span> </span><span> real values 1 to 999 for 0 to 998</span></p><p class="Standard">a,c,d<span> </span><span> </span><span> for strings the &lt;des&gt; limit the allowed characters, others will be ignored.</span></p><p class="Standard">a-z,A,Z<span> </span><span> letters only allowed </span></p><p class="Standard">=yes, =no<span> </span><span> = necessary to distinguish from the second form of descriptions</span></p><p class="Standard">for range commands:</p><p class="Standard">1 to 999</p><p class="Standard">The device will ignore commands with properties out of range and produce a error message.</p><p class="Standard"> </p><p class="Standard">- the second optional type of description can give information about labeling for the HI and should be distinguishable form the first type if necessary by starting with a letter eg.</p><p class="Standard"> </p><p class="P5">List of Standardized Command-types</p><p class="Standard">These command-type templates contain a description or format of  the properties, where necessary. For most properties the type, shortest numeric or string is obvious. In some cases the type must be defined.</p><p class="Standard"> </p><p class="P12">Meta-commands</p><p class="P10">Meta commands are used to control the system, they do not initiate actions.</p><p class="Standard"> </p><p class="Standard"> </p><p class="P9">c<span class="T3">ommands, which denote, which commands are enabled / disabled :</span></p><p class="Standard">At start all commands are enabled. The following commands are used eg, when some devices or commands are not used or should not be used at a specific time </p><p class="Standard">The "wx" commandtypes are used, to switch a part of a device. The status can be sent as info to all.</p><p class="Standard">These commands are a special form of a switch: commands are enabled (switches on) or disabled (switched off). Disabled commands are ignored.</p><p class="Standard">The command-router translate lists for normal devices and attached MYC systems only, other devices will use translated command-token.</p><p class="Standard">The "ix" commandtypes have  info only. Usually the LD or RU defines and send these info to PR and HI. These must be able to learn these commands from the announcements and react properly.</p><p class="Standard">The commands can be used to inform PR or HI, that they are not allowed to send specific commands. </p><p class="Standard">The first parameter is a string &lt;s&gt; with the commandtoken of the basic announcements of those devices the list should be sent to. It can be also a list of</p><p class="Standard">basic announcements.</p><p class="Standard">A "0" is used to send to all The length of "0" depends on the number of commandtoken</p><p class="Standard">The maximum length of the first string is (number_of_basic_announcement -1) * number_of_actual_announcements. The bytes for the length of the string (1,2 or 4) depends on this.</p><p class="Standard"/><p class="Standard">disable, first form:</p><p class="Standard">announce:<span> &lt;c&gt;;wd[,&lt;des&gt;]...[,&lt;des&gt;];max_number_of_token</span><span> </span><span> </span><span> disable dynamic, shown in announcement </span></p><p class="Standard">command:<span> &lt;c&gt;&lt;s&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> &lt;s&gt; is a list of &lt;c&gt;; may be hierarchical </span></p><p class="Standard">answer:<span> -</span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;s&gt; </span></p><p class="Standard">announce:<span> &lt;c&gt;;id[,&lt;des&gt;]...[,&lt;des&gt;];max_number_of_token</span><span> </span><span> </span><span> disable dynamic, shown in announcement </span></p><p class="Standard">command:<span> -</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">answer:<span> -</span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;s&gt;&lt;s&gt; </span></p><p class="Standard"> </p><p class="Standard">disable, second form:</p><p class="Standard">announce:<span> &lt;c&gt;;wk[,&lt;des&gt;]...[,&lt;des&gt;];&lt;c&gt;;...&lt;c&gt;</span><span> </span><span> </span><span> </span><span> disable fixed list of command-tokens shown in announcement </span></p><p class="Standard">command:<span> &lt;c&gt;</span></p><p class="Standard">answer:<span> -</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">announce:<span> &lt;c&gt;;ik[,&lt;des&gt;]...[,&lt;des&gt;];&lt;c&gt;,&lt;des&gt;;...&lt;c&gt;,&lt;des&gt;</span><span> </span><span> </span><span> disable fixed list of command-tokens shown in announcement </span></p><p class="Standard">command:<span> -</span></p><p class="Standard">answer:<span> -</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;s&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard"> </p><p class="Standard"> </p><p class="Standard">hidden, first form:</p><p class="Standard">announce:<span> &lt;c&gt;;wh[,&lt;des&gt;]...[,&lt;des&gt;];max_number_of_token</span><span> </span><span> </span><span> hidden and disabled dynamic</span></p><p class="Standard">command:<span> &lt;c&gt;&lt;s&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> &lt;s&gt; is a list of &lt;c&gt;; may be hierarchical</span></p><p class="Standard">answer:<span> -</span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;s&gt; </span></p><p class="Standard">announce:<span> &lt;c&gt;;ih[,&lt;des&gt;]...[,&lt;des&gt;];max_number_of_token</span><span> </span><span> </span><span> hidden and disabled dynamic</span></p><p class="Standard">command:<span> -</span></p><p class="Standard">answer:<span> -</span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;s&gt;&lt;s&gt; </span></p><p class="Standard"> </p><p class="Standard"/><p class="Standard">hidden, second form:</p><p class="Standard">announce:<span> &lt;c&gt;;wi[,&lt;des&gt;]...[,&lt;des&gt;];&lt;c&gt;;...&lt;c&gt;</span><span> </span><span> </span><span> </span><span> hidden and disabled fixed list</span></p><p class="Standard">command:<span> &lt;c&gt;</span></p><p class="Standard">answer:<span> -</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;</span><span> </span></p><p class="Standard">announce:<span> &lt;c&gt;;ii[,&lt;des&gt;]...[,&lt;des&gt;];&lt;c&gt;;...&lt;c&gt;</span><span> </span><span> </span><span> </span><span> </span><span> hidden and disabled fixed list</span></p><p class="Standard">command:<span> &lt;c&gt;</span></p><p class="Standard">answer:<span> -</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;s&gt;</span><span> </span></p><p class="Standard"> </p><p class="Standard">Enable, first form:</p><p class="Standard">announce:<span> &lt;c&gt;;we[,&lt;des&gt;]...[,&lt;des&gt;]; max_number_of_token</span><span> </span><span> </span><span> enable dynamic</span></p><p class="Standard">command:<span> c&gt;&lt;s&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> &lt;s&gt; is a list of &lt;c&gt; ; may be hierarchical or array of &lt;c&gt;</span></p><p class="Standard">answer:<span> -</span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;s&gt;</span></p><p class="Standard">announce:<span> &lt;c&gt;;ie[,&lt;des&gt;]...[,&lt;des&gt;]; max_number_of_token</span><span> </span><span> </span><span> enable dynamic</span></p><p class="Standard">command:<span> c&gt;&lt;s&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> &lt;s&gt; is a list of &lt;c&gt; ; may be hierarchical or array of &lt;c&gt;</span></p><p class="Standard">answer:<span> -</span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;s&gt;</span></p><p class="Standard"> </p><p class="Standard">enable, second form:</p><p class="Standard">announce:<span> &lt;c&gt;;wf[,&lt;des&gt;]...[,&lt;des&gt;];&lt;c&gt;;...&lt;c&gt;</span><span> </span><span> </span><span> </span><span> fixed list of command-tokens</span></p><p class="Standard">command:<span> &lt;c&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">answer:<span> -</span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">announce:<span> &lt;c&gt;;if[,&lt;des&gt;]...[,&lt;des&gt;];&lt;c&gt;;...&lt;c&gt;</span><span> </span><span> </span><span> </span><span> </span><span> fixed list of command-tokens</span></p><p class="Standard">command:<span> -</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">answer:<span> -</span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;s&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="P6"> </p><p class="P6">no command </p><p class="P13">This command is created by the rules-device and is sent by the command-router to a higher level command-router. The rules-device can add command during operation and will use these command-token. </p><p class="Standard">announce:<span> &lt;c&gt;;nc</span></p><p class="P6"><span class="T5">command:</span><span> -</span><span> </span></p><p class="P11"> </p><p class="P9">Switches:</p><p class="P10">one dimension for normal switches</p><p class="P10">two dimensional for crosspoint or similar</p><p class="P10"> </p><p class="Standard">OPTION for  all switches:</p><p class="Standard">&lt;n&gt;,DIMENSION,&lt;des&gt;<span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> &lt;des&gt; is somethinhg like x y z</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> info for HI to display in more than one dimension.</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> must be at the end of the announcement</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> &lt;n&gt; are the number of rows, colums...</span></p><p class="P10"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> Number of positions must match the product of the dimensions</span></p><p class="P8">operating commands</p><p class="Standard">announce:<span> &lt;c&gt;;or[,&lt;des&gt;]...[,&lt;des&gt;];pos0[,&lt;des&gt;]...[;posn,[&lt;des&gt;]][;&lt;OPTION&gt;[,&lt;des&gt;]...</span><span> ]</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> reset (0) or set (1)  posm (number from 0 to n)</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> 1st &lt;des&gt; for reset, 2nd for set</span></p><p class="P10">command:<span> &lt;c&gt;0|1</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> simple switch (pos0 in announcement only) &lt;0&gt; must be </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> omitted</span></p><p class="P10"><span> </span><span> &lt;c&gt;0|1&lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> reset or set set position &lt;n&gt;</span></p><p class="P9"> </p><p class="Standard">announce:<span> &lt;c&gt;;os[,&lt;des&gt;]...[,&lt;des&gt;];pos0[,&lt;des&gt;];...posn[.&lt;des&gt;][;&lt;n&gt;,&lt;OPTION&gt;[,&lt;des&gt;]...</span><span> ]</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> set one out of n positions active,  reset other</span></p><p class="Standard">command:<span> &lt;c&gt;&lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> set position &lt;n&gt;, reset the others</span></p><p class="Standard"> </p><p class="Standard">announce:<span> &lt;c&gt;;ot[,&lt;des&gt;]...[,&lt;des&gt;];[pos0[,&lt;des&gt;];...posn[,&lt;des&gt;][;&lt;n&gt;,&lt;OPTION&gt;[,&lt;des&gt;]...</span><span> ]</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> set one of m positions active toggling one position to the next</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> one active at a time</span></p><p class="Standard">command:<span> &lt;c&gt;</span></p><p class="Standard"> </p><p class="Standard">announce:<span> &lt;c&gt;;ou[,&lt;des&gt;]...[&lt;,des&gt;];pos0[,&lt;des&gt;];...;posn[,&lt;des&gt;][;&lt;n&gt;,&lt;OPTION&gt;[,&lt;des&gt;]...</span><span> ]</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> set one of m positions momentary active</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> Status of the function fall back to pos0</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> push button switch </span></p><p class="Standard">command:<span> &lt;c&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> no command parameter, if there is pos0 and pos1 only </span></p><p class="Standard"><span> </span><span> &lt;c&gt;&lt;n&gt;</span></p><p class="Standard"> </p><p class="P6">answer commands</p><p class="P14">announce:<span style="position:absolute;left:0.173cm;">&lt;c&gt;;ar[,&lt;des&gt;]...[,&lt;des&gt;];pos0[,&lt;des&gt;].[;posn,[&lt;des&gt;]][;&lt;n&gt;,&lt;OPTION&gt;[,&lt;des&gt;]...</span><span style="position:absolute;left:-0.827cm;">]</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> read set or reset of position</span></p><p class="P10">command:<span> &lt;c&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> simple switch  (pos0=0 in announcement only)</span></p><p class="P10"><span> </span><span> &lt;c&gt;&lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> read set or reset of position &lt;n&gt;</span></p><p class="P10">answer:<span> &amp;H00|&amp;H01</span></p><p class="P10">info:<span> </span><span> &lt;c&gt;&amp;H00|&amp;H01&lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> &lt;n&gt; omitted if pos0 only</span></p><p class="P9"> </p><p class="Standard">announce:<span> &lt;c&gt;;as[,&lt;des&gt;]...[,&lt;des&gt;];pos0[,&lt;des&gt;];...posn[.&lt;des&gt;][;&lt;n&gt;,&lt;OPTION&gt;[,&lt;des&gt;]...</span><span> ]</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> read active position; one out of n </span></p><p class="Standard">command:<span> &lt;c&gt;</span></p><p class="Standard">answer:<span> &lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> position &lt;n&gt; is active</span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;n&gt;</span></p><p class="Standard"> </p><p class="Standard">announce:<span> &lt;c&gt;;at[,&lt;des&gt;]...[,&lt;des&gt;];[pos0[,&lt;des&gt;];...posm[,&lt;des&gt;][;&lt;n&gt;,&lt;OPTION&gt;[,&lt;des&gt;]...</span><span> ]</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> read active position; answer: one out of n </span></p><p class="Standard">command:<span> &lt;c&gt;</span></p><p class="Standard">answer:<span> &lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> position &lt;n&gt; is active</span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;n&gt;</span></p><p class="Standard"> </p><p class="Standard">announce:<span> &lt;c&gt;;au[,&lt;des&gt;]...[&lt;,des&gt;];pos0[,&lt;des&gt;];...;posn[,&lt;des&gt;][;&lt;n&gt;,&lt;OPTION&gt;[,&lt;des&gt;]...</span><span> ]</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> one of m positions was set momentary active</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> Status of the function fall back to pos0(pos0 may be a dummy)</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> There is no command, used as info only </span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> no command parameter, if there is pos0 and pos1 only </span></p><p class="P9">Range controlled functions</p><p class="P10">one dimensional form for  potentiometer, frequency generator ...</p><p class="P10">two dimensional form for joysticks...</p><p class="P10">three dimensional form for robotics...</p><p class="P10">&lt;n&gt; are byte, word or long, not single or double. To display real values with "." see “More about Descriptions”</p><p class="P10">So values of announcement are integer values ("." in &lt;des&gt; only)</p><p class="P8">operating commands  </p><p class="Standard">announce:<span> &lt;c&gt;;op[,&lt;des&gt;]...;number_of_valuesx,&lt;des&gt;;lin|log,&lt;des&gt;;unitx,&lt;des&gt;;number_of_valuesy,..</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> go to value</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> number_of_values is of type &lt;n&gt;</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> Example (User display is in steps of 10):</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> 2;op;50002;3500000 to 3800000,7000000 to 7200000;lin;Hz</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> lin|log: real values in &lt;des&gt; linear or logarithmic</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> more number_of_values blocks means more than one dimension </span></p><p class="Standard">command:<span> &lt;c&gt;&lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> go to position n</span></p><p class="Standard"><span> </span><span> &lt;c&gt;&lt;n&gt;&lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> 2 dimensional</span></p><p class="Standard">comments: The Userinterface calculate the the number of steps for a displayed range (3500000 to 3800000 eg) add the ranges and divide by number_of_values.</p><p class="Standard">The result is the displayed step for one transmitted step.</p><p class="Standard">The userinterface decides, how many figures after are displayed. </p><p class="Standard">If the displayed step will vary with ranges, a additional announcement with ext iption can be used.</p><p class="Standard"> </p><p class="Standard">announce:<span> &lt;c&gt;;oo,ext&lt;c&gt;,[&lt;des&gt;]...;number_of_steps;steptimemin,&lt;des&gt;;steptimemax[,&lt;des&gt;];stepsizemin[,&lt;des&gt;];</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> stepsizemax[,&lt;des&gt;];stepsizemiddle,&lt;des&gt;...</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> move position stepwise </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> works only as extension of a op command &lt;c&gt;</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> number_of_steps=0 will stop</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> The real values  are the first &lt;des&gt;</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> multiple of 6 parameters means more than one dimension </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> dimensions in announcement must match the op commands</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> stepsize &lt;  stepsizemiddle means stepdown</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> identical values for min and max mean fixed value, command</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> and info is transmitted without that value</span></p><p class="Standard">command:<span> &lt;c&gt;0&lt;0&gt;&lt;0&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> stops</span><span> (one dimension)</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard"><span> </span><span> &lt;c&gt;&amp;H02&amp;H01&amp;H08</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> move 2 times, 3 steps up, with steptime 1,  (stepsizemiddle =5)</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> one dimesion</span></p><p class="Standard"><span> </span><span> &lt;c&gt;&amp;H02&amp;H01&amp;H03</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> 2 steps down</span></p><p class="Standard"><span> </span><span> &lt;c&gt;&amp;H02</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> 2 steps  </span></p><p class="Standard"> </p><p class="Standard">announce:<span> &lt;c&gt;;oq[,ext&lt;c&gt;,&lt;des&gt;]...[&lt;,des&gt;];&lt;defaultposition&gt;[,des]...[,des]</span><span> </span><span> go to default;  works only as extension of a op command</span></p><p class="Standard">command:<span> &lt;c&gt;</span></p><p class="Standard"> </p><p class="P6">answer commands</p><p class="Standard">announce:<span> &lt;c&gt;;ap[,&lt;des&gt;]...;number_of_valuesx,&lt;des&gt;;lin|log,&lt;des&gt;;unitx,&lt;des&gt;;number_of_valuesy,..</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> read position</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> details see op command </span></p><p class="Standard">command:<span> &lt;c&gt;</span></p><p class="Standard">answer:<span> &lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> one dimensional</span></p><p class="Standard">answer:<span> &lt;n&gt;&lt;n&gt;&lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> three dimensional</span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> one dimensional</span></p><p class="Standard"> </p><p class="P9">command has a data destination like memory, data channel or text field</p><p class="P9"> </p><p class="P10">These commands can be used for controlling devicenames and other parameters of a device but also for simple data transfer.</p><p class="P10">It is not intended to replace data streams with these command, but it is not defined clearly, where simple data transmission ends and streaming is starting.</p><p class="P10">There is no “undefined” value, when reading a memory. Therefore a FIFO  should not be read if not known wether the data is valid. The device should send the data by info or support a memory the the number of available data.</p><p class="P10"> </p><p class="P8">operating commands</p><p class="Standard">announce:<span> &lt;c&gt;;om[&lt;,des&gt;]...[,&lt;des&gt;]; &lt;ty&gt;[,&lt;des&gt;]... [,&lt;des&gt;];m_cols[,&lt;des&gt;]...[,&lt;des&gt;];[&lt;m_row[,&lt;des&gt;]...[,&lt;des&gt;]]...</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> write a memory element of type &lt;ty&gt; with optional restrictions </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> as given in &lt;des&gt;</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> number of rows and columns the device can handle</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> &lt;des&gt; may be the name of row/col,</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> any dimension is possible; </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> position z of a element is x+y*m_rows  +...</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> fixed type &lt;ty&gt;</span></p><p class="Standard">command:<span> &lt;c&gt;&lt;z&gt;&lt;data&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> write to position z</span></p><p class="Standard"> </p><p class="Standard">announce:<span> &lt;c&gt;;of[,&lt;des&gt;]...[,&lt;des&gt;];&lt;n&gt;,&lt;des&gt;;&lt;ty&gt;[,&lt;des&gt;]</span><span> </span><span> </span><span> </span><span> FIFO, stack, stream or similar functions for &lt;ty&gt; with optional </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> restrictions as given in &lt;des&gt;</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> &lt;n&gt; is number of data elements, which can be sent with one </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> command  </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> nothing known about the complete memory size!!!</span></p><p class="Standard">command:<span> &lt;c&gt;&lt;n&gt;&lt;data&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> FIFO stack..</span></p><p class="Standard"> </p><p class="Standard">announce:<span> &lt;c&gt;;oa[,&lt;des&gt;]...[,&lt;des&gt;];&lt;ty&gt;[,&lt;des&gt;]...[;&lt;ty&gt;[,&lt;des&gt;]]</span><span> </span><span> </span><span> array </span><span> </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> types &lt;ty&gt; with optional restrictions </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> as given in &lt;des&gt; can be mixed but not with command-token</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> OPTION syntax for Individualization command, see [6]</span></p><p class="Standard">command:<span> &lt;c&gt;&lt;n&gt;&lt;data&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> write to array, nth position (0 based)</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> &lt;n&gt; can be omitted for 1 element array.</span></p><p class="Standard"> </p><p class="Standard">announce:<span> &lt;c&gt;;ob,ext&lt;c&gt;</span><span> [,&lt;des&gt;]</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> sequential access mode for memory </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> any memory type allowed, work only as extension to a </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> memory command </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> this is a simplication, if a write to sequential memory positions </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> is necssary</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">command:<span> &lt;c&gt;&lt;n&gt;&lt;m&gt;&lt;data&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> write m elements to memory, starting at position n (0 based)</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> m=1  is not recommended.</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> If end of memory is reached next element is written to pos 0</span></p><p class="Standard"> </p><p class="P6">answer commands </p><p class="Standard">announce:<span> &lt;c&gt;;am[&lt;,des&gt;]...[,&lt;des&gt;]; &lt;ty&gt;[,&lt;des&gt;]... [,&lt;des&gt;];n_rows[,&lt;des&gt;]...[,&lt;des&gt;];[&lt;n_cols[,&lt;des&gt;]...[,&lt;des&gt;]]...</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> number of rows and columns the device can handle</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> position z of a element is x+y*m_row + z*mcols +...</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> fixed type</span></p><p class="Standard">command:<span> &lt;c&gt;&lt;z&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> memory</span></p><p class="Standard">answer:<span> &lt;data&gt;</span><span> </span><span> </span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;n_row&gt;&lt;n_col&gt;</span><span> &lt;data&gt;</span></p><p class="Standard"> </p><p class="Standard">announce:<span> &lt;c&gt;;af[,&lt;des&gt;]...[,&lt;des&gt;];&lt;n&gt;,&lt;des&gt;;&lt;ty&gt;[,&lt;des&gt;]</span><span> </span><span> </span><span> </span><span> FIFO, stack, stream or similar functions</span></p><p class="Standard">command:<span> &lt;c&gt;&lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> read n elements, check before, how many are valid.</span></p><p class="Standard">answer:<span> &lt;data&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> pop stack</span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;n&gt;&lt;data&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> pop stack</span></p><p class="Standard"> </p><p class="Standard">announce:<span> &lt;c&gt;,aa[,&lt;des&gt;]...[,&lt;des&gt;];&lt;ty&gt;[,&lt;des&gt;];&lt;ty&gt;[,&lt;des&gt;]...</span><span> </span><span> </span><span> array</span><span> </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> OPTION syntax for Individualization command, see [6]</span></p><p class="Standard">command:<span> &lt;c&gt;&lt;n&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> array, n is the nth element &lt;n&gt; omitted for one element array</span></p><p class="Standard">answer:<span> &lt;data&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;n&gt;&lt;data&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> array, nth element (0 based)</span></p><p class="Standard"> </p><p class="Standard">announce:<span> &lt;c&gt;;ab,ext&lt;c&gt;</span><span> [,&lt;des&gt;...]</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> sequential access mode for memory </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> any memory type allowed</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> this is a simplication, if a read of sequential memory positions </span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> is necssary</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></p><p class="Standard">command:<span> &lt;c&gt;&lt;n&gt;&lt;m&gt;&lt;data&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> read m elements from memory, starting at position n (0 based)</span></p><p class="Standard">info:<span> </span><span> &lt;c&gt;&lt;n&gt;&lt;m&gt;&lt;data&gt;</span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> m=1  is not recommended.</span></p><p class="Standard"><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> If end of memory is reached next element is read from pos 0</span></p><p class="Standard"> </p><p class="Standard"> </p><p class="P16">Copyright</p><p class="P15"> </p><p class="P17">Dieses Dokument darf unverändert kopiert werden.</p><p class="P17">Die Veränderung des Inhalts und die Verwendung von Teilen des Dokument ist nur mit Zustimmung des Autor gestattet.</p><p class="P17">Die Ideen in diesem Dokument unterliegen der GPL (Gnu Public Licence) soweit keine früheren, anderen Rechte betroffen sind.</p><p class="P17">Die Verwendung der Unterlagen erfolgt auf eigene Geafahr; es wird keinerlei Garantie übernommen.</p><p class="P17">This document can be copied without changes.</p><p class="P17">Modification of the content or usage of parts of the documnet require the agreement of the author.</p><p class="P17">The ideas of this document can be used under GPL (Gnu Public License) as long as no earlier other rights are affected.</p><p class="P17">The usage of thisdocumnet is on own risk, there is no warranty.</p><p class="P17"> </p><p class="P5">Reference:</p><p class="Standard"> </p><p class="Standard">[1]<span> <a href="http://www.dk1ri.de/common/myc/MYC_basic/MYC.pdf" class="Internet_20_link">www.dk1ri.de/common/myc/MYC_basic/MYC.pdf</a>  (deutsch)</span></p><p class="Standard">[2]<span> <a href="http://www.dk1ri.de/common/myc/MYC_basic/MYC_en.pdf" class="Internet_20_link"><span class="T1">www.dk1ri.de/common/myc/MYC_basic/MYC.pdf</span></a></span></p><p class="Standard">[3]</p><p class="Standard">[4]</p><p class="Standard">[5]<span> <a href="http://www.dk1ri.de/common/myc/MYC_basic/Rules.pdf" class="Internet_20_link">www.dk1ri.de/common/myc/MYC_basic/Rules.pdf</a></span></p><p class="Standard">[6]<span> <a href="http://www.dk1ri.de/common/myc/MYC_basic/Reserved_tokens.pdf" class="Internet_20_link">www.dk1ri.de/common/myc/MYC_basic/Reserved tokens.pdf</a></span></p></body></html>